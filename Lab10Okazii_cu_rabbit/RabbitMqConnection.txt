// RabbitMqConfigComponent.kt
package com.sd.laborator.components

import org.springframework.amqp.core.*
import org.springframework.amqp.rabbit.connection.CachingConnectionFactory
import org.springframework.amqp.rabbit.connection.ConnectionFactory
import org.springframework.amqp.rabbit.core.RabbitTemplate
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter
import org.springframework.amqp.support.converter.MessageConverter
import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.stereotype.Component

@Component
class RabbitMqConfigComponent {
    // Citirea proprietăților de conexiune
    @Value("\${spring.rabbitmq.host}") private lateinit var host: String
    @Value("\${spring.rabbitmq.port}") private val port: Int = 0
    @Value("\${spring.rabbitmq.username}") private lateinit var username: String
    @Value("\${spring.rabbitmq.password}") private lateinit var password: String

    // Gettere publice pentru a fi folosite de orchestratori
    @Value("\${okazii.exchange.bids}") lateinit var BIDS_EXCHANGE: String
    @Value("\${okazii.queue.bids}") lateinit var BIDS_QUEUE: String
    @Value("\${okazii.routingkey.bids}") lateinit var BIDS_ROUTING_KEY: String

    @Value("\${okazii.exchange.processing}") lateinit var PROCESSING_EXCHANGE: String
    @Value("\${okazii.queue.processing}") lateinit var PROCESSING_QUEUE: String
    @Value("\${okazii.routingkey.processing}") lateinit var PROCESSING_ROUTING_KEY: String

    @Value("\${okazii.exchange.processed_bids}") lateinit var PROCESSED_BIDS_EXCHANGE: String
    @Value("\${okazii.queue.processed_bids}") lateinit var PROCESSED_BIDS_QUEUE: String
    @Value("\${okazii.routingkey.processed_bids}") lateinit var PROCESSED_BIDS_ROUTING_KEY: String

    @Value("\${okazii.exchange.results}") lateinit var RESULTS_EXCHANGE: String

    // Crearea de BEANS, exact ca în Laboratorul 5
    @Bean
    fun connectionFactory(): ConnectionFactory {
        val connectionFactory = CachingConnectionFactory()
        connectionFactory.host = host
        connectionFactory.port = port
        connectionFactory.username = username
        connectionFactory.setPassword(password)
        return connectionFactory
    }

    @Bean fun messageConverter(): MessageConverter = Jackson2JsonMessageConverter()

    @Bean
    fun rabbitTemplate(connectionFactory: ConnectionFactory): RabbitTemplate {
        val rabbitTemplate = RabbitTemplate(connectionFactory)
        rabbitTemplate.messageConverter = messageConverter()
        return rabbitTemplate
    }
    
    // Crearea topologiei la pornire
    @Bean fun bidsExchangeBean(): DirectExchange = DirectExchange(BIDS_EXCHANGE)
    @Bean fun processingExchangeBean(): DirectExchange = DirectExchange(PROCESSING_EXCHANGE)
    @Bean fun processedBidsExchangeBean(): DirectExchange = DirectExchange(PROCESSED_BIDS_EXCHANGE)
    @Bean fun resultsExchangeBean(): FanoutExchange = FanoutExchange(RESULTS_EXCHANGE)
    
    @Bean fun bidsQueueBean(): Queue = Queue(BIDS_QUEUE, true)
    @Bean fun processingQueueBean(): Queue = Queue(PROCESSING_QUEUE, true)
    @Bean fun processedBidsQueueBean(): Queue = Queue(PROCESSED_BIDS_QUEUE, true)

    @Bean fun bindBids(): Binding = BindingBuilder.bind(bidsQueueBean()).to(bidsExchangeBean()).with(BIDS_ROUTING_KEY)
    @Bean fun bindProcessing(): Binding = BindingBuilder.bind(processingQueueBean()).to(processingExchangeBean()).with(PROCESSING_ROUTING_KEY)
    @Bean fun bindProcessedBids(): Binding = BindingBuilder.bind(processedBidsQueueBean()).to(processedBidsExchangeBean()).with(PROCESSED_BIDS_ROUTING_KEY)
}